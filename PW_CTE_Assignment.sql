use mavenmovies;

-- First Normal Form (1NF)
-- Identify a table in the Sakila database that violates 1NF. Explain how you would Normalize it to achieve 1NF.
-- Using the below command we can see the 'actor_award' table violates 1NF. The 'awards' column contain multiple values resulting into violating 1NF.
   select*from actor_award; 
-- To fix the above table:- There are two ways to do this:
	-- 1) Remove the awards column from the actor_award table and keep it in some other table.
    --                                        OR
	-- 2) We can add multiple rows for the actor_award table and each row is linked with one award.
    
-- Second Normal Form (2NF)
-- Choose a table in Sakila and describe how you would determine whether it is in 2NF. If it violates 2NF, explain the steps to Normalize it.
-- Using the below command we can see the 'film_text' table violates 2NF. The 'title' & 'description' column depends on 'film_id' column resulting into violating 2NF. 
select*from actor_award;
-- To fix the above table:-
-- We can  Remove the title & description column from the film_text table.

-- CTE Basics
-- Write a query using a CTE to retrieve the distinct list of actor names and the number of films they have acted in from actor and film_actor tables. 
with actor_distinct as (
select a.actor_id , concat(a.first_name ,'', a.last_name) as actor_name, count(f.film_id) as num_of_films
from actor a left join film_actor f on a.actor_id = f.actor_id group by a.actor_id)
select actor_id , actor_name, num_of_films from actor_distinct;

-- Recursive CTE
-- Use a recursive CTE to generate a hierarchical list of categories and their subcategories from the category table in Sakila. 
WITH Recursive Categories AS (
	SELECT category_id, name, sub_category_id, 1 AS level
    FROM category
    WHERE sub_category_id IS NULL
    UNION ALL
	SELECT c.category_id, c.name, c.sub_category_id, rc.level + 1 AS level
    FROM category c
    INNER JOIN Categories rc ON c.sub_category_id = rc.category_id
)
SELECT category_id, name, sub_category_id, level
FROM Categories
ORDER BY category_id;

-- CTE with Joins
-- Create a CTE that combines information from the film and language tables to display the film title, language name, and rental rate.
with combine_info as (
select f.title as film_title, l.name as language , f.rental_rate as rental_rate
from film f join language l on f.language_id = l.language_id 
group by f.title, l.language_id, f.rental_rate)
select film_title, language, rental_rate from combine_info;

-- CTE for Aggregation 
-- Write a query using a CTE to find the total revenue generated by each customer (sum of payments) from the customer and payment tables.
with customer_revenue as ( 
select c.customer_id, sum(p.amount) as sum_of_payments
from customer c join payment p on c.customer_id = p.customer_id 
group by c.customer_id)
select customer_id , sum_of_payments from customer_revenue; 

-- CTE with Window Functions
-- Utilize a CTE with a window function to rank films based on their rental duration from the film table. 
with rank_films as ( select film_id , rental_duration, rank() over (order by rental_duration) as ranking from film)
select film_id , rental_duration, ranking from rank_films;

-- CTE and Filtering
-- Create a CTE to list customers who have made more than two rentals, and then join this CTE with the customer table to retrieve additional customer details. 
with customer_rental as (
	select c.customer_id , count(r.rental_id) as count_of_rentals
	from customer c join rental r on c.customer_id = r.customer_id 
	group by c.customer_id 
    having count(r.rental_id) >= 2 )
select cr.customer_id , concat(c.first_name , ' ', c.last_name), cr.count_of_rentals 
	from customer_rental cr join customer c on cr.customer_id = c.customer_id
    group by cr.customer_id;
    
-- CTE for Date Calculations
-- Write a query using a CTE to find the total number of rentals made each month, considering the rental_date from the rental table. 
with monthly_rental as ( select month(rental_date) as rental_month, count(rental_id) as rental_count from rental group by month(rental_date))
select rental_month, rental_count from monthly_rental;

-- CTE for Pivot Operations
-- Use a CTE to pivot the data from the payment table to display the total payments made by each customer in separate columns for different payment methods. 
with customer_payment as ( select customer_id , sum(amount) as total_amount from payment group by customer_id)
select customer_id , total_amount from customer_payment;
-- Note: In the provided database the payment table doesn't contain payment method.

-- CTE and Self-Join
-- Create a CTE to generate a report showing pairs of actors who have appeared in the same film together, using film_actor the table.
with fa_1 as (select actor_id , film_id from film_actor),
fa_2 as (select actor_id , film_id from film_actor)
select fa_1.film_id, concat(fa_1. actor_id , " " , fa_2.actor_id)from fa_1 join fa_2 on fa_1.film_id = fa_2.film_id where fa_1.film_id = fa_2.film_id;


-- CTE for Recursive Search
-- Implement a recursive CTE to find all employees in the staff table who report to a specific manager, considering the reports_to column.
 WITH Recursive staff_manger AS (
    SELECT staff_id, reports_to
    FROM staff
    UNION ALL
    SELECT s.staff_id, s.reports_to
    FROM staff s
    INNER JOIN staff_manager sm ON s.reports_to = sm.staff_id
)
SELECT * FROM staff_manager;
-- Note: The staff table on the provided databse doesn't contain reports to column.
 